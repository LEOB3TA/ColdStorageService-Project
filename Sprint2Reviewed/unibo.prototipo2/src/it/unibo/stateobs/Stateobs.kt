/* Generated by AN DISI Unibo */ 
package it.unibo.stateobs

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Stateobs ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var TTState = state.TransportTrolleyState().getCurrState().toString() 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(15000) 
						CommUtils.outyellow("observer $TTState")
						CoapObserverSupport(myself, "localhost","8099","ctxprototipo2","transporttrolley")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="obs", cond=doswitch() )
				}	 
				state("obs") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t034",targetState="doObserve",cond=whenDispatch("coapUpdate"))
				}	 
				state("doObserve") { //this:State
					action { //it:State
						var msg = "${currentMsg.toString().substringAfter("currState\":\"").substringBefore("\"")}"  
						CommUtils.outred("$msg")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="obs", cond=doswitch() )
				}	 
			}
		}
}
