System /* -trace*/coldstorageservice
//Contesti

Context ctxstorageservice ip [host="localhost" port=8092] //porta a caso
Context ctxbasicrobot ip [host="localhost" port=8020] //porta a caso
Context ctxtruck ip [host="localhost" port=8087] //porta a caso
Context ctxrasp ip [host="192.168.1.xxx" port=8086]  //Raspberry

//Messaggi led
Dispatch turnOn : turnOn(_)
Dispatch turnOff : turnOff(_)
Dispatch blink : blink(_)

//Messaggi storageService

Reply storeAccepted : storeAccepted(TICKET)
Reply storeRejected : storeRejected(_)
Reply chargeTaken : chargeTaken(_)

Request pickup : pickup(_)

//Messaggi truck

Request deposit : deposit(TICKET)
Request storeFood : storeFood(FW)

//External actor

ExternalQActor basicrobot context ctxbasicrobot

//Coded actor

CodedQActor sonar23  context ctxrasp className "rx.sonarSimulator"           //IN LOCALE
//CodedQActor sonar23  context ctxrasp className "sonarHCSR04Support23"   //SU RASP

// ctxrasp
QActor led context ctxrasp {

    State setup initial {
        println("$name | setup")
    }Goto off

    State on {

    }
    Transition t0 whenMsg blink -> blink
                    whenMsg turnOff -> off


    State off{
    }
    Transition t0 whenMsg turnOn -> on
                    whenMsg blink -> blink


    State blink{
    }
    Transition t0 whenMsg turnOn -> on
                    whenMsg turnOff -> off
}

// ctxtruck

QActor serviceaccesgui context ctxtruck{
    [#
        val FW = serviceaccesgui.FW
    #]
    State s0 initial{

    }Goto idle

    State idle {
        println("$name |	in idle")
    } //TODO transizione

    State sendStore {
        request coldstorageservice -m storeFood : storeFood(FW)
        //TODO timer
    } Transition t0 whenReply storeAccepted -> idle
                    whenReply storeRejected -> idle

    State sendDeposit{
        request coldstorageservice -m deposit : deposit(TICKET)
    } Transition t0 whenReply chargeTaken -> idle
}

// ctxstorageservice

QActor servicestatusgui context ctxstorageservice{

    State s0 initial{
    }Goto idle

    State idle {
        	println("$name |	in idle")
    }
}

QActor transporttrolley context ctxstorageservice{
    [#
        val tTstate = transporttrolley.state.TransportTrolleyState(transporttrolley.state.CurrStateTrolley.IDLE)
    #]
    State s0 initial{
    	println("$name	|	setup")
    }
    Goto idle

    State idle{
    	updateResource[#tTstate.toJsonString()#]
    }
    Transition t0 whenRequest pickup -> pickingup


    State pickingup{
    	[#
			tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.PICKINGUP)
		#]
		updateResource[#tTstate.toJsonString()#]
        replyTo pickup with chargeTaken : chargeTaken(_)
    }
    // TODO: come arrivare a backhome
    State backhome{
        [#
    	    tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.MOVING)
    	#]
        updateResource[#tTstate.toJsonString()#]
    }
    Goto idle
}

QActor coldstorageservice context ctxstorageservice{
[#
	val maxw = coldstorageservice.Constants.MAXW
    var curretWeightStorage = 0.0
    var requestWeightToStore = 0.0
#]
        State setup initial {
        	println("$name |	setup")
        }
        Goto idle

        State idle {
        	println("$name |	in idle")
        	updateResource[#maxw.toJsonString()#]
        }
        Transition t0 whenRequest storeFood -> requestEvaluation
                      whenRequest deposit -> depositEvaluation


        State requestEvaluation {
            onMsg(storeFood : storeFood(FW)){
        	}
        } Goto acceptRequest if[# coldRoom.canStore(requestWeightToStore) #]
                            else rejectRequest

        State depositEvaluation{
            onMsg(deposit : deposit(TICKET)){
            }
        } Goto charged

        State charged{
            replyTo deposit with chargeTaken : chargeTaken(_)
        }Goto idle

        State rejectRequest{
            replyTo storeFood with storeRejected : storeRejected(_)
        }Goto idle

        State acceptRequest{
    	    [#
    	    TICKET = coldstorageservice.Generate.TOKEN
    	    TICKETID = TOKEN.TICKETID
    	    #]
            replyTo storeFood with storeAccepted : storeAccepted(TICKET)
            request transporttrolley -m pickup : pickup(_)
        }
}
