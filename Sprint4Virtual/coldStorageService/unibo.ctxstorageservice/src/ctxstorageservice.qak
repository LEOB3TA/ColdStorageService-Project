System /*-trace*/ ctxstorageservice

// Messaggi scambiati con SAG
Request deposit : deposit(_)
Request sendTicket : sendTicket(TICKETID)
Request storeFood : storeFood(FW)
Reply storeAccepted : storeAccepted(TICKETID) for storeFood
Reply storeRejected : storeRejected(_) for storeFood
Reply chargeTaken : chargeTaken(_) for deposit
Reply ticketValid : ticketValid(_) for sendTicket
Reply ticketNotValid : ticketNotValid(_) for sendTicket
Reply ticketExpired : ticketExpired(_) for sendTicket

// Messaggi scambiati con transporttrolley
Request pickup:    pickup(_)
Reply  pickupdone:  pickupdone(_) for pickup

// Messaggi scambiati col basicrobot23


Request engage        : engage(ARG)
Reply   engagedone    : engagedone(ARG) for engage
Reply   engagerefused : engagerefused(ARG) for engage
Dispatch disengage    : disengage(ARG)

Request  doplan     : doplan( PATH, OWNER, STEPTIME )
Reply doplandone    : doplandone( ARG ) for doplan
Reply doplanfailed  : doplanfailed( ARG ) for doplan

Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG) for moverobot
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO) for moverobot

Dispatch setrobotstate: setpos(X,Y,D)
Dispatch setdirection : dir( D )  	  //D =up|down!left|right
Dispatch cmd       	: cmd(MOVE)		 //MOVE=w|s|d|a|r|l|h

Event local_movef : movef(_)

//Sonar e movimenti robot
Event sonardata : distance(D) //dataclenaer
//Event obstacle : obstacle(D)	//distancefilter
Event alarm		: alarm(X)		//per tt TODO: l'argomento � utile?
Event stop : stop(_)
Event resume:resume(_)
Dispatch sonaractivate: info(D) //D = DLIMIT

//Led
Dispatch ledCmd : ledCmd ( CMD )

Dispatch coapUpdate: coapUpdate(RES,VAL)

//Messaggi autoinviati transporttrolley
Dispatch gotomovetoport : gotomovetoport(_)
Dispatch gotodepositactionended : gotodepositactionended(_)
Dispatch gotorobottohome : gotorobottohome(_)

// GUI

Dispatch updateS : updateS(W) // W = peso
Dispatch getData : getData(_)
Dispatch updateR : updateR(_)

Context ctxbasicrobot ip [host="127.0.0.1" port=8020] //TODO indirizzo ip del raspberry ma con porta diversa
//Context ctxrasp ip [host="192.168.178.64" port=8099] //TODO inserire l'indirizzo del raspberry
Context ctxcoldstorageservice ip [host="localhost" port=8099]//TODO inserire l'indirizzo corretto


// Attori Esterni
ExternalQActor basicrobot context ctxbasicrobot
//ExternalQActor ledqakactor context ctxrasp


QActor guicontroller context ctxcoldstorageservice{
	[#
		var Stato = state.GuiState()
		//var tt = state.TransportTrolleyState()
		var posStr = ""
		var staStr = ""
		var currPos = state.TTPosition.HOME
		var currSta = state.CurrStateTrolley.IDLE
		var X = 0
		var Y = 0
		//var arrPos = intArrayOf(X,Y)
	#]
	State init initial{
		println("$name | 	started") color green
		observeResource transporttrolley
	}
	Goto idle
	State idle{
		
	}Transition t0 whenMsg updateS -> updatestorage
				   whenMsg updateR -> updaterejected
				   whenMsg coapUpdate -> updateposition
				   whenMsg getData -> updategui
				   //whenReply robotstate ->getpos
				   // TODO: check how to manage TT state/position
				   //
				   
	State updatestorage{
		onMsg(updateS : updateS(W)){
			println("$name | ${payloadArg(0)}")
			[#
				val weight = payloadArg(0).toDouble()  //conversion beetwen strings and weights
			#]
			println("$name |	aggiunta peso pari a $weight")
			[#
			// update state	
			Stato.setCurrW(weight)
			#]
		}
	}Goto updategui
	
	State updaterejected{
		
		onMsg(updateR: updateR(_)){
			println("$name |	rejected")
			[#
				Stato.setRejected()	
			#]
		}
	}Goto updategui
		
	State updateposition{
		//onMsg(updateTp: updateTp(X, Y)){ TODO check
		
		/*	[#
				val P = payloadArg(0).toInt()
				val D = payloadArg(1).toInt()
				var X = 0
 				var Y = 0
 				val regex = """pos\((\d+),(\d+)\)""".toRegex()
				val matchResult = regex.find(P.toString())
				if (matchResult != null) {
				    val (yStr, xStr) = matchResult.destructured
				    X = xStr.toInt()
				    Y = yStr.toInt()
				}
				Stato.setTTP(intArrayOf(X,Y))
				//var prova = Stato.getTTP()
				//for (i in 0..1) println( prova[i])	
			#]
			
		}*/
		delay 500
		[#
			if(currentMsg.toString().contains("currState")){
				staStr = "${currentMsg.toString().substringAfter("currState\":\"").substringBefore("\"")}"
				posStr = "${currentMsg.toString().substringAfter("currPosition\":\"").substringBefore("\"")}"
				currPos = state.TTPosition.valueOf(posStr)
				currSta = state.CurrStateTrolley.valueOf(staStr)
				Stato.setPos(currPos)
				Stato.setAct(currSta)
				//Arrays HOME, INDOOR, ONTHEROAD, PORT
				when (Stato.getPos()){
					state.TTPosition.HOME-> {
						X=0
						Y=0
					}
					state.TTPosition.INDOOR->{
						X=4
						Y=0
					}
					state.TTPosition.PORT->{
						X=1
						Y=4
					}
				}
				Stato.setTTP(intArrayOf(X,Y))
				
			//}else if(currentMsg.toString().contains("basicrobot")){
				//println(currentMsg)
			}else{
				//println("scartato ${currentMsg}")
			}
		#]
		println("${Stato}") color yellow
	}Goto updategui
	
	State updategui{
		println("$name |	new update for GUI") color yellow
		//delay 1000
		updateResource[#Stato.toString()#]
	}Goto idle
}


QActor coldstorageservice context ctxcoldstorageservice {

 [#
        	val MAXW = resources.ColdStorageService.getMAXW()
			val TICKETTIME = resources.ColdStorageService.getTICKETTIME()
		   	var Update = resources.ColdStorageService.getCurrentWeightStorage()
		   	var RequestWeightToStore = 0.0
		   	var TICKETNUMBER = resources.ColdStorageService.getTicketNumber()
		   	resources.ColdStorageService.inizializeControl()
		   	#]

    State setup initial {
        	println("$name |	setup") color blue
        	discardMsg Off

    }

  Goto idle

    State idle {
    	 [#Update=resources.ColdStorageService.getCurrentWeightStorage()#]
        forward guicontroller -m updateS : updateS( $Update )
        println("$name |	in idle") color green
    }
    Transition t0 whenRequest storeFood -> requestEvaluation
    			  whenRequest sendTicket -> ticketEvaluation
    			  whenRequest deposit -> charged
    			  whenReply pickupdone -> taken
    			  whenEvent local_movef -> error

    /*
     *  REQUEST EVALUATION
     *  1. Funzione canStore gestisce la logica
     * 	2a. Se esito positivo, va in stato acceptRequest
     * 	2b. Altrimenti va in stato rejectRequest
     */
     
     
    State requestEvaluation {

    	 [#Update=resources.ColdStorageService.getCurrentWeightStorage()#]
        forward guicontroller -m updateS : updateS( $Update )
    	        onMsg(storeFood : storeFood(FW)){      
    	        println("Request evaluation to store ${payloadArg(0)} kg") color blue     
           [#
           	RequestWeightToStore = payloadArg(0).toDouble()
           	if(RequestWeightToStore + resources.ColdStorageService.getCurrentWeightStorage() <= MAXW ){
           		#]
           				[#resources.ColdStorageService.setCurrentWeightStorage(resources.ColdStorageService.getCurrentWeightStorage()+RequestWeightToStore)#]
           			 [#Update=resources.ColdStorageService.getCurrentWeightStorage()#]
        				forward guicontroller -m updateS : updateS( $Update )
           		[#
           	}
           	#]

       }
    } Goto acceptRequest if[# RequestWeightToStore + resources.ColdStorageService.getCurrentWeightStorage() <= MAXW #]
                            else rejectRequest

     /*
      *  ACCEPT REQUEST
      *  Generazione TICKET +
      */
     State acceptRequest{
    	[#
    		TICKETNUMBER = resources.ColdStorageService.getTicketNumber()
    		var TICKET : resources.model.Ticket = resources.model.Ticket(TICKETNUMBER, TICKETTIME,RequestWeightToStore)
    		resources.ColdStorageService.incrementTicketNumber()
    		resources.ColdStorageService.getTicketList().add(TICKET)
    	#]
    	replyTo storeFood with storeAccepted : storeAccepted($TICKETNUMBER)  //TODO:check
    	println("Request accepted | ticket = ${TICKETNUMBER}")
    	
    }Goto idle

	/*
	 *  REJECT REQUEST
	 */
    State rejectRequest{
    	[#
    		resources.ColdStorageService.setCurrentWeightStorage(resources.ColdStorageService.getCurrentWeightStorage()-RequestWeightToStore)
    	#]
    	 [#Update=resources.ColdStorageService.getCurrentWeightStorage()#]
        forward guicontroller -m updateS : updateS( $Update )
    	replyTo storeFood with storeRejected : storeRejected(_)
    	
        
    }Goto idle

    /* Non usato
     State dropout{
    	forward transporttrolley -m dropout : dropout(FW)
    	forward transporttrolley -m gotohome : gotohome(_)
	}Goto idle
*/

    State charged{
    	println("$name |	in charged") color green
    	request transporttrolley -m pickup : pickup(_)
    }Goto idle

    State taken{
    	println("$name |	in taken") color green
    	replyTo deposit with chargeTaken : chargeTaken(_)
    }Goto idle



    /*
	 *  TICKET EVALUATION
	 *  Il coldStorageService controlla se il ticket ricevuto in input � uguale a quello che si aspetta.
	 * 	In caso di errore, il truck pu� riprovare ad inserire il numero del ticket fin quando non scade il TICKETTIME.
	 *
	 */
    State ticketEvaluation {
		 onMsg(sendTicket : sendTicket(TICKETID)){
		 	println("Ticket evaluation of ticket id ${payloadArg(0)}") color blue
    	        	[#
    	        		 val TICKETID = payloadArg(0).toInt()
    	         	 val TICKETEVALUATION = resources.ColdStorageService.evaluateTicket(TICKETID) #]
    	        	if [#TICKETEVALUATION == resources.TicketEvaluationResponse.VALID #] {
    	        		[#
    	        			val TICKET = resources.ColdStorageService.getTicketById(TICKETID)
							resources.ColdStorageService.getTicketList().remove(TICKET)
    	        		#]
    	        		replyTo sendTicket with ticketValid : ticketValid(_)
    	        		request transporttrolley -m pickup:pickup(_)
    	        	}
					if [#TICKETEVALUATION == resources.TicketEvaluationResponse.EXPIRED #] {
    	        		[#
    	        			resources.ColdStorageService.incrementRejectedRequestCounter()
    	        			val TICKET = resources.ColdStorageService.getTicketById(TICKETID)
							resources.ColdStorageService.getTicketList().remove(TICKET)
    	        		#]
    	        		   println("Ticket of id ${payloadArg(0)} is expired - Reject Request") color blue
    						replyTo sendTicket with ticketExpired : ticketExpired(_)
    						forward guicontroller -m updateR : updateR(_)
    	        	}

					if [#TICKETEVALUATION == resources.TicketEvaluationResponse.INVALID #] {
    	        			println("Inserted ticket id is not valid") color red
    					replyTo sendTicket with ticketNotValid : ticketNotValid(_)
    					//forward guicontroller -m updateR : updateR(_)
    					//forward guicontroller -m updateS : updateS( $Remove)
    	        	}

       				}
    }Goto idle

   State error{
   	println("$name | robot failed to move") color red
 		println("$name | close") color red
 		[# System.exit(0) #]
   }
}

QActor transporttrolley context ctxcoldstorageservice{ //TODO  controllare cosa succede se arriva una stop e quindi avviene moverobotfailed per alarm
		[#
		var CRX = 4
		var CRY = 3
		var INDOORX= 0
		var INDOORY= 4
		var HOMEX= 0
		var HOMEY= 0
		//println("$HOMEX,$HOMEY")
		var TICKETID = 0
		val tTState = state.TransportTrolleyState()
		val MyName = name
		//val ts = kotlin.time.TimeSource.Monotonic
		//var m1 = ts.markNow()
		var begin : Long = 0
		var end : Long = 0
		val MINT : Long= 1000 //(1 second)
		var savedState = tTState.getCurrState()
		//var Position = arrayOf(HOMEX, HOMEY)
	#]
	State init initial{
		discardMsg Off
		// engage
		println("$name | request engage") color green
		request basicrobot -m engage : engage ($MyName, 305)
		//printCurrentMessage color black
	}Transition t0 //whenTime 10000 -> error
				   whenReply engagedone -> idle
				   whenReply engagerefused -> waitforfree

   State error{ //DEBUG
   		println("$name | basic robot error") color red
   		println("$name | disengaging....") color red
   		forward basicrobot -m disengage : disengage( $MyName )
   		println("$name | disengaged....") color red
   }

	State waitforfree{
		println("$name | already engaged") color green
	} Transition t0 whenTime 10000 -> idle

	State idle {
		println("$name | engaged") color green
		[#
			tTState.setCurrState(state.CurrStateTrolley.IDLE)
			tTState.setCurrPosition(state.TTPosition.HOME)
		#]
		updateResource[#tTState.toJsonString()#]
		// State print for debug
		//[#
		//	println(tTState.getCurrState())
		//	println(tTState.getCurrPosition())
		//#]
		forward basicrobot -m setrobotstate : setpos (0,0,d) // d= down
		println("$name | waiting for commands.") color green
  	}
 	Transition t0 whenRequest pickup -> moverobottoindoor

 	State moverobottoindoor {
 		//move robot to indoor
 		onMsg(pickup :pickup(_)){
 			[#
			tTState.setCurrState(state.CurrStateTrolley.PICKINGUP)
			tTState.setCurrPosition(state.TTPosition.INDOOR)
			#]
 		}
		updateResource[#tTState.toJsonString()#]
 		println("$name | moving robot to indoor.") color green
 		request basicrobot -m moverobot:moverobot($INDOORX,$INDOORY)
 		/*[#
 			Position=arrayOf(INDOORX, INDOORY)
 		#] 		
		forward guicontroller -m robotstate:robotstate( $Position, INDOOR)
		*/
 	}
 	Transition t0 whenEvent stop -> handlerobotstopped
 				  whenReply moverobotdone -> movetoport
 				// whenReply moverobotfailed -> robotmovefailed

  	State handlerobotstopped{  //TODO controllare se else va bene o è scrivibile in un modo più easy
  		println("$name |handle robot stopped") color green
  		[#
  			end = System.currentTimeMillis()
  			if ((end-begin)>MINT){
  				begin = System.currentTimeMillis()
  				savedState = tTState.getCurrState()
  				tTState.setCurrState(state.CurrStateTrolley.STOPPED)
  		#]
  			emit alarm : alarm(_) //to stop basic robot
			updateResource[#tTState.toJsonString()#]
  		[#
  			 }/*else{
  		#]
  				println("ignored stop signal") color red
  				[#tTState.setCurrState(savedState)#]
				updateResource[#tTState.toJsonString()#]

				[# 	when {
							tTState.getCurrState() == state.CurrStateTrolley.PICKINGUP -> #] request basicrobot -m moverobot:moverobot($INDOORX,$INDOORY)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOPORT -> #] request basicrobot -m moverobot:moverobot($CRX,$CRY)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOHOME ->{ #] request basicrobot -m moverobot:moverobot($HOMEX,$HOMEY)
							[#}}#]
  		[#	}*/#]



  	}Transition t0  whenReply moverobotdone -> goahead
  					whenEvent stop -> handlerobotstopped
  					whenEvent resume -> resumerobot
  	  				//whenReply moverobotfailed -> robotmovefailed

	State resumerobot{
		println("$name | resume robot") color green
		  		onMsg(resume: resume(_)){

  				[#tTState.setCurrState(savedState)#]
  				updateResource[#tTState.toJsonString()#]
  						[# 	when {
							tTState.getCurrState() == state.CurrStateTrolley.PICKINGUP -> #] request basicrobot -m moverobot:moverobot($INDOORX,$INDOORY)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOPORT -> #] request basicrobot -m moverobot:moverobot($CRX,$CRY)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOHOME ->{ #] request basicrobot -m moverobot:moverobot($HOMEX,$HOMEY)

							[#}}#]
				}
	}Transition t0  whenEvent stop -> handlerobotstopped
					whenReply moverobotdone -> goahead
					//whenReply moverobotfailed -> robotmovefailed

	State goahead{
		println("$name | go ahead with next state") color green
		[# 	when {
							tTState.getCurrState() == state.CurrStateTrolley.PICKINGUP -> #] forward transporttrolley -m gotomovetoport : gotomovetoport(_)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOPORT -> #] forward transporttrolley -m gotodepositactionended : gotodepositactionended(_)[#
							tTState.getCurrState() == state.CurrStateTrolley.MOVINGTOHOME ->{ #]
							forward transporttrolley -m gotorobottohome : gotorobottohome(_)

		[#
			}}#]
	}Transition t0 whenMsg gotomovetoport -> movetoport
					whenMsg gotodepositactionended -> depositactionended
					whenMsg gotorobottohome -> corrDir




	//when robot has taken kg from camion -> move robot to coldroom
	State movetoport{
		[#
			tTState.setCurrState(state.CurrStateTrolley.MOVINGTOPORT)
			tTState.setCurrPosition(state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		//send event "robot is in indoor"
		println("$name | robot is in indoor") color green
		println("$name | moving robot to coldroom") color green
		// da usare col css
		replyTo pickup with pickupdone:pickupdone(_)
		request basicrobot -m moverobot:moverobot($CRX,$CRY)


	}
	Transition t0  whenEvent stop -> handlerobotstopped
 				  whenReply moverobotdone -> depositactionended
 				// whenReply moverobotfailed -> robotmovefailed //TODO controllare cosa accade in caso di emissione dell'evento alarm perchè non è da escludere che non funzioni

	State depositactionended{
		[#
			tTState.setCurrState(state.CurrStateTrolley.DROPPINGOUT)
			tTState.setCurrPosition(state.TTPosition.PORT)
		#]
		updateResource[#tTState.toJsonString()#]

		println("$name | robot is in coldroom") color green
		//emitlocal local_dropoutdone: local_dropoutdone
		println("$name | depositaction ended") color green
		println("$name | waiting for next move" ) color green
		[#
			tTState.setCurrState(state.CurrStateTrolley.IDLE)
			tTState.setCurrPosition(state.TTPosition.PORT)
		#]
		updateResource[#tTState.toJsonString()#]
	}
	Transition t0 whenTime 3000 -> robottohome
	whenRequest pickup -> moverobottoindoor
	//se arriva un messagio prima di 3s moverobottoindoor altrimenti torno in home opppure se c'� gi� una pickup in coda

	State robottohome{
		[#
			tTState.setCurrState(state.CurrStateTrolley.MOVINGTOHOME)
			tTState.setCurrPosition(state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
			println("$name | back to home" ) color green
		//send event "robot is in home"
		request basicrobot -m moverobot:moverobot($HOMEX,$HOMEY)
		/*delay 6300
		forward basicrobot -m cmd:cmd(l)*/
	}
	Transition t0  whenReply moverobotdone -> corrDir
					whenEvent stop -> handlerobotstopped
	  			  //whenReply moverobotdone -> idle
 				 // whenReply moverobotfailed -> robotmovefailed


	State corrDir{
		forward basicrobot -m cmd:cmd(l)
	}Goto idle

 	//control failed robot moves
 	State robotmovefailed{
 		println("$name | robot failed to move") color red
 		emit local_movef : local_movef(_)
 		println("$name | close") color red
 		[# System.exit(0) #]
 	}
}
/*
QActor stateobservercontroller context ctxcoldstorageservice{ //ctxpc{
[#
	var state = ""
	var pos= ""
#]
	State s0 initial{
		observeResource transporttrolley
	}
	Transition t0
	whenMsg coapUpdate -> upds

	State upds{
		[#
			state = "${currentMsg.toString().substringAfter("currState\":\"").substringBefore("\"")}"
			pos = "${currentMsg.toString().substringAfter("currPosition\":\"").substringBefore("\"")}"
		#]
		[#
			when{
				pos == "HOME" -> #] forward ledqakactor -m ledCmd : ledCmd(OFF)
				[#state == "PICKINGUP" || state == "MOVINGTOPORT" || state == "MOVINGTOHOME" ->#] forward ledqakactor -m ledCmd : ledCmd(BLINK)
				[#state == "STOPPED" ->#] forward ledqakactor -m ledCmd : ledCmd(ON)
			[#}#]
	}Transition t0
	whenMsg coapUpdate -> upds

}*/



