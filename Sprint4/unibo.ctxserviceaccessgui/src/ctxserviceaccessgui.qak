System /*-trace*/ ctxserviceaccessgui

// Messaggi scambiati con mocktruck
Request deposit : deposit(_)
Request sendTicket : sendTicket(TICKETID)
Request storeFood : storeFood(FW)
Reply storeAccepted : storeAccepted(TICKETID) for storeFood
Reply storeRejected : storeRejected(_) for storeFood
Reply chargeTaken : chargeTaken(_) for deposit
Reply ticketValid : ticketValid(_) for sendTicket
Reply ticketNotValid : ticketNotValid(_) for sendTicket
Reply ticketExpired : ticketExpired(_) for sendTicket

Context ctxcoldstorageservice ip [host="192.168.178.21" port=8099]//TODO inserire l'indirizzo corretto
Context ctxserviceaccessgui ip [host="localhost" port=8099] //TODO inserire ip corretto
//Context ctxtruck ip[host="127.0.0.1" port=8092] //indirizzo interno alla rete

// Attori Esterni
ExternalQActor coldstorageservice context ctxcoldstorageservice

QActor mocktruck context ctxserviceaccessgui{
    [#
       	var FW = 0
        var DT = 1000L  //DT= driver time tempo che ci mette il driver dopo aver ricevuto la richiesta per arrivare alla INDOOR
        var TICKETID = 0
        val truckstate = state.TruckState()

        fun initDriver(){
        	FW =  kotlin.random.Random.nextInt(1, 101)
        	DT = kotlin.random.Random.nextLong(1, 5001)
        }
    #]
    State s0 initial{
		println("$name |	started") color green
		println("this is an infinite loop, you need to kill the program to stop this") color red
		discardMsg Off

    }Goto idle

    State idle {
        println("$name |	in idle") color green
        [#
        	initDriver()
        #]
    }Goto sendStore

    State sendStore {
    	 println("$name |	sendStore") color green
        request coldstorageservice -m storeFood : storeFood($FW)

    } Transition t0 whenTime 60000 -> handleError //se non arriva una risposta entro 60 secondi c'è un errore interno al sistema, il driver abbandona
    whenReply storeAccepted -> accepted
                    whenReply storeRejected -> rejected

   State rejected{
   		println("$name |	request rejected") color green
   }Goto idle

    State accepted{
   		onMsg (storeAccepted : storeAccepted(TICKETID)){
   		[#
   			TICKETID = payloadArg(0).toInt()
   		#]
   		}

   		println("$name |	request accepted") color green
   }Transition t0 whenTimeVar DT -> sendTicket

   State sendTicket{
   		 request coldstorageservice -m sendTicket : sendTicket($TICKETID)
   		 println("$name |	send ticket") color green
   } Transition t0 whenTime 60000 -> handleError //se non arriva una risposta entro 60 secondi c'� un errore interno al sistema, il driver abbandona
   					whenReply ticketValid -> sendDeposit
    				whenReply ticketExpired -> handleTicketExpired


    State sendDeposit{
        request coldstorageservice -m deposit : deposit(_)
        println("$name |	send deposit") color green
    } Transition t0  whenTime 60000 -> handleError //se non arriva una risposta entro 60 secondi c'� un errore interno al sistema, il driver abbandona
    					whenReply chargeTaken -> idle

    State handleError{
    	println("$name |	COLD STORAGE SERVICE ERROR") color red
    } Goto idle

	State handleTicketExpired{
		println("$name |	ticket expired") color green
	} Goto idle

	State handleTicketNotValid{
		println("$name |	ticket Not valid retry") color green
	} Goto sendTicket

}

