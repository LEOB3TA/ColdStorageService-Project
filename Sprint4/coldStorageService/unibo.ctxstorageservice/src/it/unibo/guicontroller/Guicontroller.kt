/* Generated by AN DISI Unibo */ 
package it.unibo.guicontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Guicontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Stato = state.GuiState()
				//var tt = state.TransportTrolleyState()
				var posStr = ""
				var staStr = ""
				var currPos = state.TTPosition.HOME
				var currSta = state.CurrStateTrolley.IDLE
				var X = 0
				var Y = 0
				//var arrPos = intArrayOf(X,Y)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | 	started")
						CoapObserverSupport(myself, "192.168.178.64","8099","ctxcoldstorageservice","transporttrolley")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="updatestorage",cond=whenDispatch("updateS"))
					transition(edgeName="t01",targetState="updaterejected",cond=whenDispatch("updateR"))
					transition(edgeName="t02",targetState="updateposition",cond=whenDispatch("coapUpdate"))
					transition(edgeName="t03",targetState="updategui",cond=whenDispatch("getData"))
				}	 
				state("updatestorage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateS(W)"), Term.createTerm("updateS(W)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("$name | ${payloadArg(0)}")
								
												val weight = payloadArg(0).toDouble()  //conversion beetwen strings and weights
								CommUtils.outblack("$name |	aggiunta peso pari a $weight")
								
											// update state	
											Stato.setCurrW(weight)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updategui", cond=doswitch() )
				}	 
				state("updaterejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateR(_)"), Term.createTerm("updateR(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("$name |	rejected")
								
												Stato.setRejected()	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updategui", cond=doswitch() )
				}	 
				state("updateposition") { //this:State
					action { //it:State
						
									if(currentMsg.toString().contains("currState")){
										staStr = "${currentMsg.toString().substringAfter("currState\":\"").substringBefore("\"")}"
										posStr = "${currentMsg.toString().substringAfter("currPosition\":\"").substringBefore("\"")}"
										currPos = state.TTPosition.valueOf(posStr)
										currSta = state.CurrStateTrolley.valueOf(staStr)
										Stato.setPos(currPos)
										Stato.setAct(currSta)
										//Arrays HOME, INDOOR, ONTHEROAD, PORT
										when (Stato.getPos()){
											state.TTPosition.HOME-> {
												X=0
												Y=0
											}
											state.TTPosition.INDOOR->{
												X=4
												Y=0
											}
											state.TTPosition.PORT->{
												X=1
												Y=4
											}
										}
										Stato.setTTP(intArrayOf(X,Y))
										
									//}else if(currentMsg.toString().contains("basicrobot")){
										//println(currentMsg)
									}else{
										//println("scartato ${currentMsg}")
									}
						CommUtils.outyellow("${Stato}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updategui", cond=doswitch() )
				}	 
				state("updategui") { //this:State
					action { //it:State
						CommUtils.outyellow("$name |	new update for GUI")
						updateResourceRep(Stato.toString() 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
