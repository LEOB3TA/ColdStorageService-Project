System transporttrolley

/*Messaggio di uscita*/
Dispatch exit:		exit(_)

/*Messaggi azioni di deposito */

Request pickup:		pickup(_)
Reply	pickupdone:	pickupdone(_)
Dispatch dropout  : dropout(FW) //peso
Event	dropoutdone: dropoutdone(_)

/*BackHome */
Dispatch gotohome: gotohome(_)

/*Movimenti */

Request moveto: moveto(POS)
Reply moveok:	moveok(_)
Reply moveko:	moveko(_)

/*Messaggi di azione */
Request execaction : exeaction(ACT)// ACT = PICKUP | DROPOUT
Reply execok :	execok(_)
Reply execko :	execko(_)

/*Messaggi Pathexec  */
Request dopath: dopath(PATH)
Reply dopathdone: dopathdone(ARG)
Reply dopathfail: dopathfail(ARG)

/*Basicrobot */
Dispatch cmd	:cmd(MOVE) // MOVE = w | s | l | r | h

//Contesti

Context ctxstorageservice ip [host="localhost" port=8092] //porta a caso
Context ctxbasicrobot ip [host="localhost" port=8020] //porta a caso
//Context ctxtruck ip [host="localhost" port=8087] //porta a caso
//Context ctxrasp ip [host="192.168.1.xxx" port=8086]  //Raspberry
Context ctxtransporttrolley ip[host="localhost" port=8056]

ExternalQActor basicrobot context ctxbasicrobot
ExternalQActor pathexec context ctxbasicrobot
ExternalQActor coldstorageservicecore context ctxstorageservice

/*Componente che si occupa di gestire richieste ed azioni */

QActor transporttrolleycore context ctxtransporttrolley{
	
	[#
		lateint var POS : String
		val tState = transporttrolley.state.TransportTrolleyState()
		var updateFlag = 0
	#]
	
	State init initial{
		[# utility.Banner.transportTrolleyBanner()#]
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	starting...")#]
		
		updateResource[#tTState.toJsonString()#]
			
	}Goto idle

	State idle{
		
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	waiting...")#]
		
	}Transition t0 whenRequest pickup -> pickupMove
					whenMsg dropout -> dropoutMove
					whenMsg gotohome -> backHome
					whenMsg exit -> end
	State pickupMove{
		request transporttrolleymover -m moveto : moveto(INDOOR)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply moveok -> pickupExec
					whenReply moveko -> moveErr

	State pickupExec{
		request transporttrolleyexecutor -m execaction : execaction(PICKUP)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.PICKINGUP)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.INDOOR)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply execok -> pickupRes
					whenReply execko -> execErr

	State pickupRes{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
		#]
		updateResource[#tTState.toJsonString()#]
		replyTo pickup with pickupdone : pickupdone(_)
	}Goto idle

	State dropoutMove{
		onMsg(dropout : dropout(FW)){
			[#	
				try{
					FW = payloadArg(0).trim().uppercase()
					POS = "ColdRoom"
				}catch(e : Exception){}	
			#]	
		}
		request transporttrolleymover -m moveto : moveto($POS)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply moveok -> dropoutExec
					whenReply moveko -> moveErr

	State dropoutExec{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.DROPPINGOUT)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.valueOf(POS))
		#]
		updateResource[#tTState.toJsonString()#]
		request transporttrolleyexecutor -m execaction : execaction(DROPOUT)
	}Transition t0 whenReply execok -> dropoutRes
					whenReply execko -> execErr

	State dropoutRes{
		
		emit dropoutdone : dropoutdone

		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
		#]
		
		updateResource[#tTState.toJsonString()#]
		
	}Goto idle

	State backHome{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		request transporttrolleymover -m moveto : moveto(HOME)
	}Transition t0 whenReply moveok -> backHomeRes
					whenReply moveko -> moveErr

	State backHomeRes{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.HOME)	
		#]
		updateResource[#tTState.toJsonString()#]
	}Goto idle

	State moveErr{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	something went wrong...assistance required.")#]
		forward coldstorageservicecore -m exit : exit(_)
		forward transporttrolleycore -m exit : exit(_) 
	}Goto idle 

	State execErr{
		//Still to be implemented 		
	}

	State end{
		forward transporttrolleyexecutor -m exit : exit(_)
		forward transporttrolleymover -m exit : exit(_)
		terminate 0
	}
}
/*Componente incaricato di muovere il DDR robot */

QActor transporttrolleymover context ctxtransporttrolley{
	
	[#
		
		lateinit var destination  : String
		var xDestination : Int = 0
		var yDestination : Int = 0
		var dir : String = "" 
		var PATH = ""
		var PATHSTILLTODO = ""
		var attempt : Int = 0
		var direction : String = ""
		var someToFix : Boolean = false
	#]
	
	State init initial{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	starting...")#]
		[# unibo.planner23Util.initAI() #]
	}Goto idle

	State idle{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	waiting...")#]
		
		[#someToFix = false#]
		
	}Transition t0 whenRequest moveto -> destinationEval
					whenMsg exit -> end

	State destinationEval{
		
		onMsg(moveto : moveto(POS)){
			[#	
				try{
					destination = payloadArg(0).trim().uppercase()
				
					xDestination = utility.ServiceAreaDestinationConfig.getXDestination(destination)
					yDestination = utility.ServiceAreaDestinationConfig.getYDestination(destination)
					dir 		 = utility.ServiceAreaDestinationConfig.getPlannerDirection(destination)
				}catch(e : Exception){}	
			#]	
		}
		
	}Goto plan

	State plan{
		
		[#
			unibo.planner23Util.setGoal(xDestination, yDestination)
			unibo.planner23Util.doPlan()
			PATH = unibo.planner23Util.doPlanCompact()
			unibo.basicomm23.utils.CommUtils.outcyan("$name	|	moving to $destination")
		#]

	}Goto execMove

	State execMove{
		
		request pathexec -m dopath : dopath($PATH)
		
	}Transition t0 whenReply dopathdone -> lookForFix
					whenReply dopathfail -> moveKo
				
	State lookForFix{
		[# unibo.planner23Util.doPathOnMap(PATH) #] 
		[# someToFix = false #]
		if[# unibo.planner23Util.getDirection() != dir #]{
			[# someToFix = true #]
		}
		
	}Goto fixDir if[# someToFix #]
					else moveOk 
				
	State fixDir{
		[# 
			PATH = utility.DirectionFixer.getPathForFixDir(unibo.planner23Util.getDirection(), dir) 
		 	unibo.basicomm23.utils.CommUtils.outcyan("$name	|	fixing direction")
		#]
		
	}Goto execMove
	
	State moveOk{
		
		[# attempt = 0 #]
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	arrived in $destination")#]
		
		replyTo moveto with moveok : moveok
		
	}Goto idle

	State moveKo{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	moveKo")#]
		[#attempt++#]
		onMsg(dopathfail : dopathfail(ARG)){
			[#	
				try{
					PATHSTILLTODO = payloadArg(0)
				}catch(e : Exception){}	
			#]
		}
		if[#attempt==3#]{
			[# attempt = 0 #]
			replyTo moveto with moveko : moveko(_)
		}
		else{
			request pathexec -m dopath : dopath($PATHSTILLTODO)	
		}
		
	}Transition t0 whenReply dopathdone -> lookForFix
					whenReply dopathfail -> moveKo 
						
	State end{
		terminate 0
	}
}

/*Componente che si occupa di eseguire le azioni */

QActor transporttrolleyexecutor context ctxtransporttrolley{
	
	[#
		lateinit var action : String	
	#]
	
	State init initial{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	starting...")#]
	}Goto idle
	
	State idle{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	waiting...")#]
	}Transition t0 whenRequest execaction -> actionEval
					whenMsg exit -> end
	
	State actionEval{
		onMsg(execaction : execaction(ACT)){
			[#	
				try{
					action = payloadArg(0).trim().uppercase()
				}catch(e : Exception){}	
			#]	
		}
	}Goto execPickup if[#action.equals("PICKUP")#]
						else execDropout
	
	State execPickup{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	$action execution")#]
		[#delay(kotlin.random.Random.nextLong(3000, 5000))#]
		replyTo execaction with execok : execok(_)
	}Goto idle
	
	State execDropout{
		[# unibo.basicomm23.utils.CommUtils.outcyan("$name	|	$action execution")#]
		[#delay(kotlin.random.Random.nextLong(2000, 4000))#]
		replyTo execaction with execok : execok(_)
	}Goto idle
	
	State end{
		terminate 0
	}
}
