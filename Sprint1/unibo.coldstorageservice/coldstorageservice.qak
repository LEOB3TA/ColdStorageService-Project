System coldstorageservice

// Messaggi scambiati con mocktruck
Request deposit : deposit(_)
Request sendTicket : sendTicket(TICKETID)
Request storeFood : storeFood(FW)
Reply storeAccepted : storeAccepted(TICKETID)
Reply storeRejected : storeRejected(_)
Reply chargeTaken : chargeTaken(_)
Reply ticketValid : ticketValid(_)
Reply ticketNotValid : ticketNotValid(_)
Reply ticketExpired : ticketExpired(_)

// Messaggi scambiati con transporttrolley
Request pickup:    pickup(_)
Reply  pickupdone:  pickupdone(_)
Dispatch dropout  : dropout(FW) //peso
Event  dropoutdone: dropoutdone(_)

Dispatch gotohome: gotohome(_)

// Contesti
Context ctxcoldstorageservice ip[host='localhost' port=8080]
Context ctxtruck ip[host='localhost' port=8092]

// Attori
ExternalQActor mocktruck context ctxtruck

QActor transporttrolley context ctxcoldstorageservice {
	State setup initial {
		println("$name |	setup")
	}
}

QActor coldstorageservice context ctxcoldstorageservice {
	
	[#
			val MAXW = ColdStorageService.getMAXW()
			val TICKETTIME = ColdStorageService.getTICKETTIME()
		   	var currentWeightStorage = ColdStorageService.getCurrentWeightStorage()
		   	var requestWeightToStore = 0.0
		   	var TICKETNUMBER = ColdStorageService.getTicketNumber()
    	  	
	#]
	
    State setup initial {
        	println("$name |	setup") color blue
        	discardMsg Off
    }

    Goto idle
        
    State idle {
        println("$name |	in idle")
        // updateResource[#maxw.toJsonString()#] // TODO: fai check se serve o meno
    }  
    Transition t0 whenRequest storeFood -> requestEvaluation
    			  whenRequest sendTicket -> ticketEvaluation
    			  whenRequest deposit -> charged
    
    /*
     *  REQUEST EVALUATION
     *  1. Funzione canStore gestisce la logica
     * 	2a. Se esito positivo, va in stato acceptRequest
     * 	2b. Altrimenti va in stato rejectRequest
     */
    State requestEvaluation {
    	        onMsg(storeFood : storeFood(FW)){
           println("Request evaluation to store ${payloadArg(0)} kg") color blue
       }
    } Goto acceptRequest if[# ColdStorageService.canStore(requestWeightToStore) #] 
                            else rejectRequest
             
     /*
      *  ACCEPT REQUEST
      *  Generazione TICKET +
      */               
     State acceptRequest{
    	[#
    		var TICKET : Ticket = Ticket(TICKETNUMBER, TICKETTIME) 	
    		ColdStorageService.incrementTicketNumber()	
    		ColdStorageService.getTicketList().add(TICKET)
    	#]
        replyTo storeFood with storeAccepted : storeAccepted(TICKETNUMBER) // TODO: check se tornare tutto il ticket o solo numero
    }Goto idle
    
	/*
	 *  REJECT REQUEST
	 */
    State rejectRequest{
    	   	[#
			 ColdStorageService.incrementRejectedRequestCounter()
       		#]  	
        replyTo storeFood with storeRejected : storeRejected(_)
    }Goto idle   
    
    State dropout{
    	forward transporttrolley -m dropout : dropout(FW)
    	forward transporttrolley -m gotohome : gotohome(_)
	}Goto idle


    State charged{
    	replyTo deposit with chargeTaken : chargeTaken(_)
    	request transporttrolley -m pickup : pickup(_)
    }Goto idle
    
    
    State removeExpiredTicket {
    	println("Ticket of id ${payloadArg(0)} is expired - Reject Request") color blue
   			[#
   	  		 val TICKETID = payloadArg(0).toInt()
   	  		 val TICKET = ColdStorageService.getTicketById(TICKETID)
			 ColdStorageService.incrementRejectedRequestCounter()
			 ColdStorageService.getTicketList().remove(TICKET)
       		#]
    } Goto idle
    
    State sendInvalidTicket {
    	println("Inserted ticket id is not valid") color red
    } Goto idle

 
    /*
	 *  TICKET EVALUATION
	 *  Il coldStorageService controlla se il ticket ricevuto in input è uguale a quello che si aspetta.
	 * 	In caso di errore, il truck può riprovare ad inserire il numero del ticket fin quando non scade il TICKETTIME.
	 * 
	 */
    State ticketEvaluation {
    	println("Ticket evaluation of ticket id ${payloadArg(0)}") color blue
    					[#
    	        		 val TICKETID = payloadArg(0).toInt()
    	        		#]
    	        onMsg(sendTicket : sendTicket($TICKETID)){
    	        	[# val TICKETEVALUATION = ColdStorageService.evaluateTicket(TICKETID) #]
    	        	if [#TICKETEVALUATION == TicketEvaluationResponse.VALID #] {
    	        		[#
    	        			val TICKET = ColdStorageService.getTicketById(TICKETID)
							ColdStorageService.getTicketList().remove(TICKET)
    	        		#]
    	        		replyTo sendTicket with ticketValid : ticketValid(_)	
    	        	}
    	        												
       				}
    }Goto removeExpiredTicket if [# ColdStorageService.evaluateTicket(payloadArg(0).toInt()) == TicketEvaluationResponse.EXPIRED #]
    								else sendInvalidTicket
   
}

