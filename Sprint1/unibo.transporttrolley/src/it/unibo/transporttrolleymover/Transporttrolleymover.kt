/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolleymover

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolleymover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val planner = unibo.planner23.Planner23Util()
				lateinit var destination  : String
				var xDestination : Int = 0
				var yDestination : Int = 0
				var dir : String = "" 
				var PATH = ""
				var PATHSTILLTODO = ""
				var attempt : Int = 0
				var direction : String = ""
				var someToFix : Boolean = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 unibo.basicomm23.utils.CommUtils.outcyan("$name	|	starting...") 
						 planner.initAI()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 unibo.basicomm23.utils.CommUtils.outcyan("$name	|	waiting...") 
						someToFix = false 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="destinationEval",cond=whenRequest("moveto"))
					transition(edgeName="t017",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("destinationEval") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveto(POS)"), Term.createTerm("moveto(POS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													destination = payloadArg(0).trim().uppercase()
												
													xDestination = utility.ServiceAreaDestinationConfig.getXDestination(destination)
													yDestination = utility.ServiceAreaDestinationConfig.getYDestination(destination)
													dir 		 = utility.ServiceAreaDestinationConfig.getPlannerDirection(destination)
												}catch(e : Exception){}	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="plan", cond=doswitch() )
				}	 
				state("plan") { //this:State
					action { //it:State
						
									planner.setGoal(xDestination, yDestination)
									planner.doPlan()
									PATH = planner.doPlanCompact()
									unibo.basicomm23.utils.CommUtils.outcyan("$name	|	moving to $destination")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="execMove", cond=doswitch() )
				}	 
				state("execMove") { //this:State
					action { //it:State
						request("doplan", "doplan($PATH)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="lookForFix",cond=whenReply("doplandone"))
					transition(edgeName="t019",targetState="moveKo",cond=whenReply("doplanfail"))
				}	 
				state("lookForFix") { //this:State
					action { //it:State
						 planner.doPathOnMap(PATH)  
						 someToFix = false  
						if(  planner.getDirection() != dir  
						 ){ someToFix = true  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="fixDir", cond=doswitchGuarded({ someToFix  
					}) )
					transition( edgeName="goto",targetState="moveOk", cond=doswitchGuarded({! ( someToFix  
					) }) )
				}	 
				state("fixDir") { //this:State
					action { //it:State
						forward("setdirection", "setdirection(dir)" ,"basicrobot" ) 
						 
									//PATH = utility.DirectionFixer.getPathForFixDir(planner.getDirection(), dir) 
								 	unibo.basicomm23.utils.CommUtils.outcyan("$name	|	fixing direction")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="execMove", cond=doswitch() )
				}	 
				state("moveOk") { //this:State
					action { //it:State
						 attempt = 0  
						 unibo.basicomm23.utils.CommUtils.outcyan("$name	|	arrived in $destination") 
						answer("moveto", "moveok", "moveok"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveKo") { //this:State
					action { //it:State
						 unibo.basicomm23.utils.CommUtils.outcyan("$name	|	moveKo") 
						attempt++ 
						if( checkMsgContent( Term.createTerm("doplanfail(ARG)"), Term.createTerm("doplanfail(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													PATHSTILLTODO = payloadArg(0)
												}catch(e : Exception){}	
						}
						if( attempt==3 
						 ){ attempt = 0  
						answer("moveto", "moveko", "moveko(_)"   )  
						}
						else
						 {request("doplan", "doplan($PATHSTILLTODO)" ,"basicrobot" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="lookForFix",cond=whenReply("doplandone"))
					transition(edgeName="t021",targetState="moveKo",cond=whenReply("doplanfail"))
				}	 
				state("end") { //this:State
					action { //it:State
						terminate(0)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
