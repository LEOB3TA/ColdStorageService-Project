/* Generated by AN DISI Unibo */ 
package it.unibo.sonar23

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar23 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						var Appl = sysUtil.getActor("transporttrolley") != null 
						CommUtils.outblack("sonar | start with appl: $Appl")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t026",targetState="work",cond=whenDispatch("sonaractivate"))
				}	 
				state("work") { //this:State
					action { //it:State
						var DLIMIT = payloadArg(0).toInt() 
						updateResourceRep( "Sonar waiting" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="handlesonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t028",targetState="handleobstacle",cond=whenEvent("obstacle"))
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var D = payloadArg(0).toInt() 
								CommUtils.outmagenta("$name distance ${payloadArg(0)}")
								if( D>DLIMIT 
								 ){emit("resume", "resume(_)" ) 
								CommUtils.outblack("RESUMING TransportTrolley")
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleobstacle") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("obstacle(D)"), Term.createTerm("obstacle(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var D = payloadArg(0).toInt() 
								CommUtils.outmagenta("$name handleobstacle ALARM ${payloadArg(0)}")
								if( D <= DLIMIT 
								 ){emit("alarm", "alarm(obstacle)" ) 
								CommUtils.outblack("STOP TransportTrolley")
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({ Appl == true  
					}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! ( Appl == true  
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outblack("$name BYE")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
